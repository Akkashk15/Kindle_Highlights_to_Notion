"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const BASEURL = "https://www.notion.so/api/v3/";
const getAllBlocks = ({ url, token, limit, stack, chunkNumber, res, resolve, reject, body, }) => __awaiter(this, void 0, void 0, function* () {
    return node_fetch_1.default(url, {
        headers: {
            accept: "*/*",
            "accept-language": "de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7",
            "content-type": "application/json",
            cookie: `token_v2=${token};`
        },
        body: JSON.stringify(Object.assign({ cursor: { stack }, chunkNumber }, body, { limit, verticalColumns: false })),
        method: "POST"
    })
        .then(response => response.json())
        .then(r => {
        if (((r.cursor || {}).stack || {}).length) {
            getAllBlocks({
                url, token, limit, stack: r.cursor.stack,
                chunkNumber: chunkNumber + 1,
                res: {
                    recordMap: {
                        block: Object.assign({}, res.recordMap.block, r.recordMap.block)
                    }
                },
                resolve,
                reject,
                body
            });
        }
        else {
            if (r.errorId) {
                reject(r);
            }
            const ret = {
                recordMap: {
                    block: Object.assign({}, res.recordMap.block, (r.recordMap || {}).block)
                }
            };
            resolve(ret);
        }
    })
        .catch((error) => console.error(error));
});
function request({ endpoint, creds: { token }, body }) {
    return new Promise((resolve, reject) => {
        getAllBlocks({
            url: `${BASEURL}${endpoint}`,
            token,
            limit: (body || { limit: 50 }).limit || 50,
            stack: [],
            chunkNumber: 0,
            res: {
                recordMap: { block: {} }
            },
            resolve,
            reject,
            body
        });
    });
}
exports.default = request;
